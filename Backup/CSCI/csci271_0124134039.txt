
===========================================================
	[FILE: csci271.txt]
	[DATE CREATED: Mon Jan 13 13:17:56 2020]
	[Title: csci 271]



++++++++++++++++++++++++++++++++++++++++++++++++++++++
	TIMESTAMPSTR:  Tue Jan 14 12:28:07 2020 
	Last Save:     Tue Jan 14 12:28:10 2020 
++++++++++++++++++++++++++++++++++++++++++++++++++++++


test line

++++++++++++++++++++++++++++++++++++++++++++++++++++++
	TIMESTAMPSTR:  Thu Jan 16 13:23:03 2020 
	Last Save:     Thu Jan 16 13:23:06 2020 
++++++++++++++++++++++++++++++++++++++++++++++++++++++


--[Algorithms]--
   [Greatest Common Divisor]
      one at a time. yes. just one at a time. and stop
        at 36
         most innefficient
         but gets job done. it is one algorithmm
      start with smaller of two numbers, and start
        going downwards
         first one you'll find will be the greatest
      prime factors

++++++++++++++++++++++++++++++++++++++++++++++++++++++
	TIMESTAMPSTR:  Fri Jan 17 13:20:51 2020 
	Last Save:     Fri Jan 17 13:20:54 2020 
++++++++++++++++++++++++++++++++++++++++++++++++++++++



   Design strategies
      brute force, divide and conquer
      greedy approach
      divide and conquer
      decrease and conquer
      backtracking
      branch and bound
      iterative improvements
      space and time tradeoffs
      dynamic programming
      transform and conquer
   how good is it?
      Time efficiency
      Space efficiency
   is there better ways?
      optimization

++++++++++++++++++++++++++++++++++++++++++++++++++++++
	TIMESTAMPSTR:  Tue Jan 21 13:01:06 2020 
	Last Save:     Tue Jan 21 13:01:09 2020 
++++++++++++++++++++++++++++++++++++++++++++++++++++++


side note: multithreading is on the programmer side.
  all the cores in the world don't matter if the program
  cannot use more than one thread

Analyze
   to break down into components or essential features
   we'll look more towards an algorithm's efficiency
   [Efficiency]
      Speed
         time efficiency
            very important
      Space
         simplicity
      successful algorithms:
         simplicity
         maintainability
         generality

++++++++++++++++++++++++++++++++++++++++++++++++++++++
	TIMESTAMPSTR:  Thu Jan 23 12:38:25 2020 
	Last Save:     Thu Jan 23 12:38:27 2020 
++++++++++++++++++++++++++++++++++++++++++++++++++++++



--[Analysis]--
[test]
   fail
[test]
   fail
--[TEST]--
   success



--[Analysis]--
   [time vs space efficiency]
      focus of former
         inprove speed more than space
         space problems often include memory leaks
      space/speed issues are evolving
         emergence of fast and cheap flash memory is
           changing parameters on which solutions are
           judged and tradeoffs made
         flash memory vs hard disk dkrives
   [Measuring size of input]
      Algorithm runs longer on larger inputs
      characterize running time of algorithm as a
        function of the input size
      time efficiency starts to matter when the input
        size is large
      often, sthe size of the numbers (Magnitude) is
        measured by number of bits
         b= floor(log(2,n))+1
            number of digits in the number
   [Measuring Running Time]
      want to find metric that is independent of a
        particular implementation
         meaning seperate from:
            computer
            language
            etc
      basic operation
         contributes most towards running time of the
           algorithm
            usually: them most time consuming operation
            sorting: key comparison
            numerical: multiplication or division
      [Theoretical analysis of time efficiency]
         time efficiency is number of repetitions of
           the basic operation as a function of input
           size
         basic operation:
            operation that contributes most toward the
              running time of the algorithm
         An approximation
         great for relative comparisons: double input
           size
            relative comparison is independent of
              constant for time of basicis operation
            multiplicative constant

++++++++++++++++++++++++++++++++++++++++++++++++++++++
	TIMESTAMPSTR:  Fri Jan 24 12:35:45 2020 
	Last Save:     Fri Jan 24 12:35:53 2020 
++++++++++++++++++++++++++++++++++++++++++++++++++++++


         doubling input size could make the time take
           4x longer
      example formulas
         exact
            c(n) = n(n-1)/2
         indicating order of growth with specific
           multiplicative constant
            c(n) ~ 0.5n^2
         indicating order of growth with unknown
           multiplicative constant
            c(n) ~ cn^2

   Order of growth
      how much faster will algorithm run on a computer
        that is twice as fast
      how much longer does it take to solve a problem
        of double input size
   case scenarios
      worst case
         max over inputs of size n
      best case
         minimum over inputs of size n
      average case
         average over inputs of size n
            number of times the basic operation will be
              executed on typical input
            not average of worst and best
            expected number of basic operations
              considered as a random variable
               under some assumption about the
                 probablility of distribution of all
                 possible inputs
